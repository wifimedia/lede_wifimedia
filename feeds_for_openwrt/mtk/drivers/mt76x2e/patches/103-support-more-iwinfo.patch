Index: mt76x2e-p4rev-113843/src/common/cmm_cfg.c
===================================================================
--- mt76x2e-p4rev-113843.orig/src/common/cmm_cfg.c
+++ mt76x2e-p4rev-113843/src/common/cmm_cfg.c
@@ -935,6 +935,10 @@ INT RTMP_COM_IoctlHandle(
 			*(ULONG *)pData = pAd->ChannelListNum;
 			break;
 
+		case CMD_RTPRIV_IOCTL_TXPOWER_GET:
+			*(ULONG *)pData = pAd->CommonCfg.TxPowerPercentage;
+			break;
+
 		case CMD_RTPRIV_IOCTL_CHAN_LIST_GET:
 		{
 			UINT32 i;
Index: mt76x2e-p4rev-113843/src/include/rtmp_cmd.h
===================================================================
--- mt76x2e-p4rev-113843.orig/src/include/rtmp_cmd.h
+++ mt76x2e-p4rev-113843/src/include/rtmp_cmd.h
@@ -207,7 +207,8 @@ typedef enum _CMD_RTPRIV_IOCTL_COMMON {
 	CMD_RTPRIV_IOCTL_CHAN_LIST_NUM_GET,
 	CMD_RTPRIV_IOCTL_CHAN_LIST_GET,
 	CMD_RTPRIV_IOCTL_FREQ_LIST_GET,
-
+	CMD_RTPRIV_IOCTL_TXPOWER_GET,
+	
 	/* interface */
 	CMD_RTPRIV_IOCTL_VIRTUAL_INF_UP,
 	CMD_RTPRIV_IOCTL_VIRTUAL_INF_DOWN,
Index: mt76x2e-p4rev-113843/src/os/linux/ap_ioctl.c
===================================================================
--- mt76x2e-p4rev-113843.orig/src/os/linux/ap_ioctl.c
+++ mt76x2e-p4rev-113843/src/os/linux/ap_ioctl.c
@@ -257,7 +257,14 @@ INT rt28xx_ap_ioctl(struct net_device *n
 		case SIOCSIWSENS:	/*set sensitivity (dBm) */
 		case SIOCGIWPOWER:  /*get Power Management settings */
 		case SIOCSIWPOWER:  /*set Power Management settings */
-		case SIOCGIWTXPOW:  /*get transmit power (dBm) */
+		case SIOCGIWTXPOW:  /*get transmit power (mW) */
+			{
+				UINT32 TxPower = 0;
+				RTMP_AP_IoctlHandle(pAd, NULL, CMD_RTPRIV_IOCTL_TXPOWER_GET, 0, &TxPower, 0);
+				wrqin->u.txpower.flags = IW_TXPOW_MWATT;
+				wrqin->u.txpower.value = TxPower;
+			}
+			break;
 		case SIOCSIWTXPOW:  /*set transmit power (dBm) */
 		/*case SIOCGIWRANGE:	//Get range of parameters */
 		case SIOCGIWRETRY:	/*get retry limits and lifetime */
@@ -268,7 +275,9 @@ INT rt28xx_ap_ioctl(struct net_device *n
 		    {
 /*				struct iw_range range; */
 				struct iw_range *prange = NULL;
-				UINT32 len;
+				UINT32 len, i, val, ChannelListNum;
+				UCHAR *pChannel = NULL;
+				UINT32 *pFreq = NULL;
 
 				/* allocate memory */
 				os_alloc_mem(NULL, (UCHAR **)&prange, sizeof(struct iw_range));
@@ -290,8 +299,40 @@ INT rt28xx_ap_ioctl(struct net_device *n
 				prange->max_qual.qual = 100;
 				prange->max_qual.level = 0; /* dB */
 				prange->max_qual.noise = 0; /* dB */
+
+				RTMP_AP_IoctlHandle(pAd, NULL, CMD_RTPRIV_IOCTL_CHAN_LIST_NUM_GET, 0, &ChannelListNum, 0);
+				prange->num_channels = ChannelListNum;
+				os_alloc_mem(NULL, (UCHAR **)&pChannel, sizeof(UCHAR) * ChannelListNum);
+				if (pChannel == NULL)
+					goto GETRANGE_EXIT;
+
+				os_alloc_mem(NULL, (UCHAR **)&pFreq, sizeof(UINT32) * ChannelListNum);
+				if (pFreq == NULL)
+					goto GETRANGE_EXIT;
+
+				RTMP_AP_IoctlHandle(pAd, NULL, CMD_RTPRIV_IOCTL_CHAN_LIST_GET, 0, pChannel, 0);
+				RTMP_AP_IoctlHandle(pAd, NULL, CMD_RTPRIV_IOCTL_FREQ_LIST_GET, 0, pFreq, 0);
+
+				for (val = 0, i = 1; i <= prange->num_channels; i++)
+				{
+					prange->freq[val].i = pChannel[i-1];
+					prange->freq[val].m = pFreq[i - 1] * 100; /* OS_HZ */
+					prange->freq[val].e = 1;
+					val++;
+					if (val == IW_MAX_FREQUENCIES)
+						break;
+				}
+				prange->num_frequency = val;
+
 				len = copy_to_user(wrq->u.data.pointer, prange, sizeof(struct iw_range));
 				os_free_mem(NULL, prange);
+GETRANGE_EXIT:
+				if (prange)
+					os_free_mem(NULL, prange);
+				if (pChannel)
+					os_free_mem(NULL, pChannel);
+				if (pFreq)
+					os_free_mem(NULL, pFreq);				
 		    }
 		    break;
 		    
