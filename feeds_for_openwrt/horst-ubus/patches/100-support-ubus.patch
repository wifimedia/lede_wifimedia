Index: horst-ubus-2016-12-22/Makefile
===================================================================
--- horst-ubus-2016-12-22.orig/Makefile
+++ horst-ubus-2016-12-22/Makefile
@@ -39,8 +39,9 @@ OBJS += listsort.o
 OBJS += main.o
 OBJS += network.o
 OBJS += protocol_parser.o
+OBJS += ubus.o
 
-LIBS = -lncurses -lm -luwifi
+LIBS = -lncurses -lm -luwifi -lubus -lubox
 INCLUDES = -I.
 CFLAGS += -std=gnu99 -Wall -Wextra -g $(INCLUDES) -DVERSION=\"$(shell git describe --tags)\"
 
Index: horst-ubus-2016-12-22/main.c
===================================================================
--- horst-ubus-2016-12-22.orig/main.c
+++ horst-ubus-2016-12-22/main.c
@@ -48,6 +48,8 @@
 #include "ieee80211_duration.h"
 #include "protocol_parser.h"
 
+#include "ubus.h"
+
 struct history hist;
 struct statistics stats;
 struct channel_info spectrum[MAX_CHANNELS];
@@ -313,6 +315,10 @@ void handle_packet(struct uwifi_packet*
 	if (conf.dumpfile[0] != '\0' && !conf.paused && DF != NULL)
 		write_to_file(p);
 
+	notifier(wlan_get_packet_type_name(p->wlan_type), p->wlan_src, p->wlan_dst,
+			p->wlan_bssid, p->wlan_essid, p->phy_signal, p->wlan_channel,
+			p->wlan_wep, p->wlan_wpa, p->wlan_rsn);
+
 	if (conf.paused)
 		return;
 
@@ -571,6 +577,8 @@ int main(int argc, char** argv)
 	struct sigaction sigint_action;
 	struct sigaction sigpipe_action;
 
+	ubus_init();
+
 	uwifi_essids_init();
 	init_spectrum();
 
Index: horst-ubus-2016-12-22/ubus.c
===================================================================
--- /dev/null
+++ horst-ubus-2016-12-22/ubus.c
@@ -0,0 +1,66 @@
+#include "ubus.h"
+#include <uwifi/util.h>
+#include <libubus.h>
+
+static struct blob_buf b;
+static struct ubus_context *ctx;
+
+static struct ubus_method methods[] = {};
+
+static struct ubus_object_type obj_type = UBUS_OBJECT_TYPE("horst", methods);  
+
+static struct ubus_object object = {
+	.name = "horst",
+	.type = &obj_type
+};
+
+void ubus_init()
+{
+	int ret = -1;
+	
+	ctx = ubus_connect(NULL);  
+	if (!ctx) {  
+		fprintf(stderr, "Failed to connect to ubus\n");  
+		return;
+	}
+
+	ret = ubus_add_object(ctx, &object);
+	if (ret) {
+        fprintf(stderr, "Failed to add object: %s\n", ubus_strerror(ret));  
+		goto ERR;
+	}
+
+	return;
+ERR:
+	 ubus_free(ctx);
+}
+
+void notifier(const char *packet_type, const unsigned char *src, const unsigned char *dst,
+	const unsigned char *bssid, const char *essid, int signal, int channel,
+	int wlan_wep, int wlan_wpa, int wlan_rsn)
+{
+	blob_buf_init(&b, 0);
+
+	blobmsg_add_u32(&b, "timestamp", time(NULL));
+	blobmsg_add_string(&b, "packet_type", packet_type);
+	blobmsg_add_string(&b, "src", mac_sprint(src));
+	blobmsg_add_string(&b, "dst", mac_sprint(dst));
+	blobmsg_add_string(&b, "bssid", mac_sprint(bssid));
+	blobmsg_add_string(&b, "essid", essid);
+	blobmsg_add_u32(&b, "signal", signal);
+	blobmsg_add_u32(&b, "channel", channel);
+
+	if (wlan_rsn && wlan_wpa)
+		blobmsg_add_string(&b, "encryption", "WPA12");
+	else if (wlan_rsn)
+		blobmsg_add_string(&b, "encryption", "WPA2");
+	else if (wlan_wpa)
+		blobmsg_add_string(&b, "encryption", "WPA1");
+	else if (wlan_wep)
+		blobmsg_add_string(&b, "encryption", "WEP");
+	else
+		blobmsg_add_string(&b, "encryption", "");
+	
+	ubus_notify(ctx,  &object, "", b.head, -1);
+}
+
Index: horst-ubus-2016-12-22/ubus.h
===================================================================
--- /dev/null
+++ horst-ubus-2016-12-22/ubus.h
@@ -0,0 +1,9 @@
+#ifndef UBUS_H_
+#define UBUS_H_
+
+void ubus_init();
+void notifier(const char *packet_type, const unsigned char *src, const unsigned char *dst,
+	const unsigned char *bssid, const char *essid, int signal, int channel,
+	int wlan_wep, int wlan_wpa, int wlan_rsn);
+
+#endif
Index: horst-ubus-2016-12-22/ubus_test.lua
===================================================================
--- /dev/null
+++ horst-ubus-2016-12-22/ubus_test.lua
@@ -0,0 +1,29 @@
+#!/usr/bin/lua
+
+require "ubus"
+require "uloop"
+
+uloop.init()
+
+local conn = ubus.connect()
+if not conn then
+	error("Failed to connect to ubus")
+end
+
+local subscriber = {
+	notify = function(msg)
+		print(msg.timestamp,
+			msg.packet_type, 
+			"src:" .. msg.src, "dst:" .. msg.dst,
+			"bssid:" .. msg.bssid,
+			"signal:" .. msg.signal,
+			"channel:" .. msg.channel,
+			"essid:" .. msg.essid,
+			msg.encryption)
+	end,
+}
+
+conn:subscribe("horst", subscriber)
+
+uloop.run()
+
